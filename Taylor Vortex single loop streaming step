#include<iostream>
#include<cmath>

// scaling factor and domain definetion //
const unsigned int scale = 1;
const unsigned int NX = scale*32;
const unsigned int NY = NX;
 
// No. of directions //
const unsigned ndir = 9;

// memory size //
const size_t mem_size_ndir = sizeof(double)*NX*NY*ndir;
const size_t mem_size_scalar = sizeof(double)*NX*NY;

// lattice weight and direction //
const double w0 = 4.0/9.0;
const double ws = 1.0/9.0;
const double wd = 1.0/36.0;

// define tau //
const double nu = 1.0/6.0;
const double tau = 3.0*nu + 0.5;

// max. flow speed //
const double u_max = 0.04/scale;

// fluid density and time step //
const double rho0 = 1.0;
const unsigned int NSTEPS = 200*scale*scale;
const unsigned int NSAVE = 50;

inline size_t scalar_index(unsigned int x,unsigned int y)
{ 
  return NX*y+x;
} 

inline size_t field_index(unsigned int x,unsigned int y,unsigned int d)
{
  return NX*(NY*d+y)+x;
}

void taylor_green(unsigned int t,unsigned int x,unsigned int y,double *r,double *u,double *v)
{
 double kx = 2.0*M_PI/NX; // M_PI is a pi i.e, 22/7 //
 double ky = 2.0*M_PI/NY;
 double td = 1.0/(nu*(kx*kx+ky*ky));

 double X = x+0.5;
 double Y = y+0.5;
 double ux = -u_max*sqrt(ky/kx)*cos(kx*X)*sin(ky*Y)*exp(-1.0*t/td);
 double uy = u_max*sqrt(kx/ky)*sin(kx*X)*cos(ky*Y)*exp(-1.0*t/td);
 double P = -0.25*rho0*u_max*u_max*((ky/kx)*cos(2.0*kx*X)+(kx/ky)*cos(2.0*ky*Y))*exp(-2.0*t/td);
 double rho = rho0+3.0*P;

 *r=rho;
 *u=ux;
 *v=uy;
}

void taylor_green(unsigned int t,double *r,double *u,double *v)
{
 for(unsigned int y=0; y<NY; ++y)
 { 
  for(unsigned int x=0; x<NX; ++x)
  {
   size_t sidx = scalar_index(x,y);
   taylor_green(t,x,y,&r[sidx],&u[sidx],&v[sidx]);
  }
 }
}

void init_equilibrium(double *f0,double *f,double *r,double *u,double *v)
{
 for(unsigned int y=0; y<NY; ++y)
 {
  for(unsigned int x=0; x<NX; ++x)
  {
   double rho = r[scalar_index(x,y)];
   double ux = u[scalar_index(x,y)];
   double uy = v[scalar_index(x,y)];
   
   double tw0r = w0*rho;
   double twsr = ws*rho;
   double twdr = wd*rho;

   double tux = 3.0*ux;
   double tuy = 3.0*uy;

   double omusq = 1.-1.5*(ux*ux+uy*uy);

   f0[scalar_index(x,y)] = tw0r*omusq;

   double cidot3u = tux;
   f[field_index(x,y,1)] = twsr*(omusq+cidot3u*(0.5*cidot3u+1)); 
   f[field_index(x,y,3)] = twsr*(omusq-cidot3u*(-0.5*cidot3u+1));

   cidot3u = tuy;
   f[field_index(x,y,2)] = twsr*(omusq+cidot3u*(0.5*cidot3u+1));  
   f[field_index(x,y,4)] = twsr*(omusq-cidot3u*(-0.5*cidot3u+1));

   cidot3u = tux+tuy;
   f[field_index(x,y,5)] = twdr*(omusq+cidot3u*(0.5*cidot3u+1));
   f[field_index(x,y,7)] = twdr*(omusq-cidot3u*(-0.5*cidot3u+1));

   cidot3u = -tux+tuy;
   f[field_index(x,y,6)] = twdr*(omusq+cidot3u*(0.5*cidot3u+1));
   f[field_index(x,y,8)] = twdr*(omusq-cidot3u*(-0.5*cidot3u+1));
  }
 }
}

void stream_collide_save(double *f0,double *f1,double *f2,double *r,double *u,double *v,bool save)
{
 // define constants //
 const double tauinv = 2./(6.*nu+1.0);
 const double omtauinv = 1-tauinv;

 for(unsigned int k=0; k<NX*NY; ++k)
 {
  const int kp = k/NY;
  const int ka = k%NY;
  const int kb = (k+1)%NY;
  const int kc = (kp+1)%NY;
  const int km = (NY+k-1)%NY;
  const int kl = (NY+kp-1)%NY;

  double ft0 = f0[scalar_index(ka,kp)];
  
  double ft1 = f1[field_index(km,kp,1)];
  double ft2 = f1[field_index(ka,kl,2)];
  double ft3 = f1[field_index(kb,kp,3)];
  double ft4 = f1[field_index(ka,kc,4)];
  double ft5 = f1[field_index(km,kl,5)];
  double ft6 = f1[field_index(kb,kl,6)];
  double ft7 = f1[field_index(kb,kc,7)];
  double ft8 = f1[field_index(km,kc,8)];

  double rho = ft0+ft1+ft2+ft3+ft4+ft5+ft6+ft7+ft8;
  double rhoinv = 1./rho;
  double ux = rhoinv*(ft1+ft5+ft8-(ft3+ft6+ft7));
  double uy = rhoinv*(ft2+ft6+ft5-(ft4+ft7+ft8));

  if(save)
  {
   r[scalar_index(ka,kp)]=rho;
   u[scalar_index(ka,kp)]=ux;
   v[scalar_index(ka,kp)]=uy;
  }

  double tw0r = tauinv*w0*rho;
  double twsr = tauinv*ws*rho;
  double twdr = tauinv*wd*rho;

  double omusq = 1.-1.5*(ux*ux+uy*uy);
  
  double tux = 3.0*ux;
  double tuy = 3.0*uy;

  f0[scalar_index(ka,kp)] = omtauinv*ft0 + tw0r*omusq;

  double cidot3u = tux;
  f2[field_index(ka,kp,1)] = omtauinv*ft1 + twsr*(omusq+cidot3u*(0.5*cidot3u+1)); 
  f2[field_index(ka,kp,3)] = omtauinv*ft3 + twsr*(omusq-cidot3u*(-0.5*cidot3u+1));

  cidot3u = tuy;
  f2[field_index(ka,kp,2)] = omtauinv*ft2 + twsr*(omusq+cidot3u*(0.5*cidot3u+1));  
  f2[field_index(ka,kp,4)] = omtauinv*ft4 + twsr*(omusq-cidot3u*(-0.5*cidot3u+1));

  cidot3u = tux+tuy;
  f2[field_index(ka,kp,5)] = omtauinv*ft4 + twdr*(omusq+cidot3u*(0.5*cidot3u+1));
  f2[field_index(ka,kp,7)] = omtauinv*ft4 + twdr*(omusq-cidot3u*(-0.5*cidot3u+1));

  cidot3u = -tux+tuy;
  f2[field_index(ka,kp,6)] = omtauinv*ft4 + twdr*(omusq+cidot3u*(0.5*cidot3u+1));
  f2[field_index(ka,kp,8)] = omtauinv*ft4 + twdr*(omusq-cidot3u*(-0.5*cidot3u+1));
 }
}

int main(int argc, char* argv[])
{
 double *f1 = (double*) malloc(mem_size_ndir);
 double *f2 = (double*) malloc(mem_size_ndir);
 double *f0 = (double*) malloc(mem_size_scalar);
 double *rho = (double*) malloc(mem_size_scalar);
 double *ux = (double*) malloc(mem_size_scalar);
 double *uy = (double*) malloc(mem_size_scalar);

 taylor_green(0,rho,ux,uy);

 init_equilibrium(f0,f1,rho,ux,uy);

 for(unsigned int n=0; n<NSTEPS; ++n)
 {
  bool save = (n+1)%NSAVE == 0;
  
  stream_collide_save(f0,f1,f2,rho,ux,uy,save);

  double* temp = f1;
  f1 = f2;
  f2 = temp;
 }
 free(f1);
 free(f2);
 free(f0);
 free(rho);
 free(ux);
 free(uy);
 
 return 0;
}
